import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MemoryRouter, useSearchParams, useLocation } from 'react-router-dom';
import RedirectForm from './RedirectForm';
import pako from 'pako';

// Mock react-router-dom hooks
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useSearchParams: jest.fn(),
  useLocation: jest.fn(),
}));

// Mock window.alert
const mockAlert = jest.spyOn(window, 'alert').mockImplementation(() => {});

// Mock localStorage
const mockLocalStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn(),
};
Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });

describe('RedirectForm', () => {
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
    mockLocalStorage.getItem.mockReturnValue(null);
    
    // Setup default mock implementations for router hooks
    const mockSearchParams = new URLSearchParams();
    (useSearchParams as jest.Mock).mockReturnValue([mockSearchParams, jest.fn()]);
    (useLocation as jest.Mock).mockReturnValue({ pathname: '/', search: '' });
  });

  it('renders form elements', () => {
    render(
      <MemoryRouter>
        <RedirectForm />
      </MemoryRouter>
    );

    expect(screen.getByLabelText('Tenderly Username:')).toBeInTheDocument();
    expect(screen.getByLabelText('Project Slug:')).toBeInTheDocument();
    expect(screen.getByText('Save Details')).toBeInTheDocument();
  });

  it('handles form submission', async () => {
    render(
      <MemoryRouter>
        <RedirectForm />
      </MemoryRouter>
    );

    const usernameInput = screen.getByLabelText('Tenderly Username:');
    const projectSlugInput = screen.getByLabelText('Project Slug:');
    const submitButton = screen.getByText('Save Details');

    fireEvent.change(usernameInput, { target: { value: 'testuser' } });
    fireEvent.change(projectSlugInput, { target: { value: 'testproject' } });
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockAlert).toHaveBeenCalledWith('Values saved successfully! You will be redirected when parameters are provided.');
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('tenderlyUsername', 'testuser');
      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('tenderlyProjectSlug', 'testproject');
    });
  });

  it('validates form fields', async () => {
    render(
      <MemoryRouter>
        <RedirectForm />
      </MemoryRouter>
    );

    const submitButton = screen.getByText('Save Details');
    fireEvent.click(submitButton);

    // The form should prevent submission and not call alert
    await waitFor(() => {
      expect(mockAlert).not.toHaveBeenCalled();
    });
  });

  it('handles compressed query parameters', async () => {
    // Create a test string to compress
    const testString = 'block=29286050&network=8453';
    const bytes = new Uint8Array(testString.length);
    for (let i = 0; i < testString.length; i++) {
      bytes[i] = testString.charCodeAt(i);
    }
    const compressed = pako.gzip(bytes);
    // Convert to base64url without using Buffer
    const base64url = btoa(String.fromCharCode.apply(null, Array.from(compressed)))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
    
    mockLocalStorage.getItem.mockImplementation((key) => {
      if (key === 'tenderlyUsername') return 'testuser';
      if (key === 'tenderlyProjectSlug') return 'testproject';
      return null;
    });

    const mockSearchParams = new URLSearchParams(`q=${base64url}`);
    (useSearchParams as jest.Mock).mockReturnValue([mockSearchParams, jest.fn()]);
    (useLocation as jest.Mock).mockReturnValue({ 
      pathname: '/',
      search: `?q=${base64url}`,
    });

    const mockWindowLocation = {
      href: '',
    };
    Object.defineProperty(window, 'location', {
      value: mockWindowLocation,
      writable: true,
    });

    render(
      <MemoryRouter initialEntries={[`/?q=${base64url}`]}>
        <RedirectForm />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(mockWindowLocation.href).toBe('https://dashboard.tenderly.co/testuser/testproject/simulator/new?block=29286050&network=8453');
    });
  });

  it('handles real compressed query parameters', async () => {
    const compressedQuery = 'H4sIAAAAAAAA_9RY28qdxw19m1zrrJkLX4S4hj6GpJGgpNjFcUgev3x_U0pbHNKMD-m63B_SmhkdlrTzr-_q-1e0QRcv_abevf3wPurDt-e87x9-eAU_65s3yP5aEt68_u617Nf1LUP5d2_U_6S-AsgO-drfvO0PP717__2rJcrfvI-f3vz4tj785d3bP7_9248fXsHPx3jxbIEr2J35Lc7HPxH2NnUmqFp7j9PkSTPCE5Vwssek81c8fAHg5ftRXBi3NNaFvZTkVfrI5r4wZ47T-_fbozVfvv8F-wtuwvcAYUGG9oGyiFWygdcs3K3Lm4y5JPYIreCZDLa5I7xsF_fAO3O6pBegfZpzmJ3Kp0GEeMZ4Tu_E6T6unYi8z-aMkwHHrYB24NOSPLoIWUN8Fp8AOYkKvcdPmC3Itl3TtWuL-OINoWI5Si0Rp1ETnlBLVxxRU-YDiNBxqG7q6XfASFimjuYl8W1cbh1c5vWvsDd3omntPnbsLA_dJQi1hiEjo0Sm5-vq0K2OI0m61mb5aEe71ePZB506SMKqBzlrA_uKneINQ0k4ayZasjrHxYDSJPfqBvI5axsZ-ukGt1gL09dkB7XmKh9cp-krx-FWEASbR11PFqsK2FJ79MHbgR-5IDML0oPpRkdyjfQ-2kQzg6pLDplpLGyZTglRggkRnqZoS7VwRebG2AdMc85uPCf2gJ5UzE_0FJ8IUpWQCTQVGeS9KNRMrBeeVZoliDv0657ysv5YpAE297lMIHtKeY3YGodQ1hRFtnU6TwI8haqDeqyZmttl-uyTyHZCWIDu9JnvTg_w8Xn2s-8D2Mi8Pnr_sqNmoRYYM6awUnCsNswgoz21x1l3_edyOvoEHraJqamDlW1rS76O6f-ErzsH_Er-_UZ-OTpBCS_pgYcODSmVeGuOEc1ZWegFbicKe0h7m4CQLfRjB6Mo4fjHGP7Ye_ESd3Yi5M91_9-G2zxA-u86oH6ZP9iU2tTF1iXJ58B9B_m_QhFNdIIbHCGGHooilG2ZMpDix1jmyEthm88c83-rjXVIeDcutyVuuTPCHY5aTtbagH_kN7Xta6WZbhus3msiNGgmKxytBd2tdvEZUXCNGIMVMahl4LadlxCxmqHOSi8bqeTt1Qcmjzya7ukYWzszba2mpTqzsF3Tpq7-hLoD3Zbg9d56ic-3t34ZB5ehx1t-vNQJwC17ymstYMo9lTrWUx6eq4zNVkfv5c_CpU2MxJniPKMesRjDC84mN7TVWUV7aLkGEO-aOUOx62ARgJeWP9qHJzeZnMFLnSaVvQ1O61rQq2y5sKDDmLgZaK5pic4dtIypfG-t4XxOfrYbw1fdnFZ4Ern4djAl4iByN31R2heNtaY2f_SWiIrI2JahlZWpvXz5xYplW_Cj1WgiLktBt7luZklHNV4yHhJmVk5GrgqS4jKOdnSr28hRV7RlW8zd-RfOcbJt_kwC_2B73tnFwZmDhsb55ftzVrZ5mRj-NSs8v5x_nt4fb-ws_-HT7LnVY-FfdHb7ewAAAP__UyP9_LIaAAA=';
    
    mockLocalStorage.getItem.mockImplementation((key) => {
      if (key === 'tenderlyUsername') return 'testuser';
      if (key === 'tenderlyProjectSlug') return 'testproject';
      return null;
    });

    // URL decode the compressed query before passing it to URLSearchParams
    const mockSearchParams = new URLSearchParams(`q=${compressedQuery}`);
    (useSearchParams as jest.Mock).mockReturnValue([mockSearchParams, jest.fn()]);
    (useLocation as jest.Mock).mockReturnValue({ 
      pathname: '/',
      search: `?q=${compressedQuery}`,
    });

    const mockWindowLocation = {
      href: '',
    };
    Object.defineProperty(window, 'location', {
      value: mockWindowLocation,
      writable: true,
    });

    // Mock console.error to prevent test output pollution
    const originalConsoleError = console.error;
    console.error = jest.fn();

    render(
      <MemoryRouter initialEntries={[`/?q=${compressedQuery}`]}>
        <RedirectForm />
      </MemoryRouter>
    );

    await waitFor(() => {
      expect(mockWindowLocation.href).toBe('https://dashboard.tenderly.co/testuser/testproject/simulator/new?block=29058385&contractAddress=0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789&network=8453&rawFunctionInput=0xd6383f94000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000000021e9657320cc899f72fbdb6621dacb0dbef64ebd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000e4e1c000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000000493e0000000000000000000000000000000000000000000000000000000000033ade9000000000000000000000000000000000000000000000000000000000016e36000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001080ba5ed0c6aa8c49038f819e587e2633c4a9f428a3ffba36f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004029de3bf3372c7fe04423ff63fde9b1feed75eb1139d93badba0d76c029a11e967aec2135a47f83da04db150e9f7da6680be69cfec9c94478390a546bf52e4aade15b0a8c44ecad456533d0110ead2ce0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062434fcd5be0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000e3eb165c9ed6d6d87a59c410c8f30babac44fefd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000124b75c934a00000000000000000000000021e9657320cc899f72fbdb6621dacb0dbef64ebd000000000000000000000000f9d172ea24a6cef13bc90378a9b47e0f2b21f8ffae4bcebf74602b64b98ee027fd8962617dee076a881b78fbea2e5b8c7f18de2d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000041e3f575dbc355406856a5ed7e70301082666a25d1b762d4b8f4e9d5e22fff15584d2665a81e4feb4a4520fa443fe2ae6b56a75133e1a9d065bfd9e1dda9f05db51b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ccb0bb02fcaba27e82a56646e81d8c5bc4119a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000344e0093eda00000000000000000000000000000000000000000000000000000000000000601248f468f70a535b451368debdb00cb0d5f15d6e32e3e74fed9db136da434021000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000021e9657320cc899f72fbdb6621dacb0dbef64ebd0000000000000000000000000000000000000000000000000000000001e13381000000000000000000000000c6d566a56a1aff6508b41f6c90ff131615583bcd000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000009646565706c696e6b3300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044d5fa2b008b411d2d2f252c47e5bf622fd8bc17c076dac1ef25e9640426817d6d1ac2b0d700000000000000000000000021e9657320cc899f72fbdb6621dacb0dbef64ebd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084773722138b411d2d2f252c47e5bf622fd8bc17c076dac1ef25e9640426817d6d1ac2b0d700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000012646565706c696e6b332e626173652e65746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c22faeb0760d4230ef2ac21496bb4f0b47d634fd4c000067ffd67d0000000000008d2439e18768476b9baa770d56bfbc890101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000069788b66596f1ce98faa5a2ffbca716e41776c9c3df45075aaf608aaf15c60769738422356615f8b7c6f4cb397ced0fbd403007b71a95ebbb688e2855ff81e75b6fc1cc0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001949fc7c88032b9fcb5f6efc7a7b8c63668eae9871b765e23123bb473ff57aa831a7c0d9276168ebcc29f2875a0239cffdf2a9cd1c2007c5c77c071db9264df1d000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a7b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a2273496a396e6164474850596759334b7156384f7a4a666c726275504b474f716d59576f4d57516869467773222c226f726967696e223a2268747470733a2f2f7369676e2e636f696e626173652e636f6d222c2263726f73734f726967696e223a66616c73657d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000');
    });

    // Restore mocks
    console.error = originalConsoleError;
  });

  it('handles clear details', async () => {
    render(
      <MemoryRouter>
        <RedirectForm />
      </MemoryRouter>
    );

    const clearButton = screen.getByText('Clear Details');
    fireEvent.click(clearButton);

    await waitFor(() => {
      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('tenderlyUsername');
      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('tenderlyProjectSlug');
      expect(mockAlert).toHaveBeenCalledWith('Details cleared successfully!');
    });
  });
}); 